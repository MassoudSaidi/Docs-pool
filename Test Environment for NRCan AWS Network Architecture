# Report on Test Environment for NRCan AWS Network Architecture 
This report details the successful creation of a high-fidelity test environment that simulates the target NRCan AWS network architecture. This sandbox was used to develop and validate an application deployment methodology that is fully compliant with NRCan's specified security policies and networking patterns. 
## 1. Executive Summary
The deployment strategy for the target application has been successfully validated within a simulated AWS environment that faithfully replicates the NRCan network architecture. The simulation correctly implements the client's "Hub-and-Spoke" model, which utilizes a central Transit Gateway for all internet connectivity, thereby respecting the organizational policy that forbids the use of Internet Gateways or NAT Gateways within the application's own VPC. 

The application workload, including an internal Application Load Balancer and a private EC2 instance, was deployed and tested within this constrained environment. Both outbound internet access (for system updates) and inbound user access were proven to be functional through the simulated central network hub. The resulting two-part Terraform configuration (one part for the network, one for the application) ensures a clean separation of concerns and guarantees that the application deployment is portable and compliant with the client’s pre-existing infrastructure. 
## 2. Project Objective 
The primary objective was to develop a deployment process for a web application that could operate within the specific constraints of the NRCan AWS environment. Key requirements derived from the client's "AWS Network Architecture Guide" included: - Deployment into a pre-existing Virtual Private Cloud (VPC) with only private subnets. - Strict prohibition on the creation of Internet Gateways (IGWs) or NAT Gateways within the application's VPC, enforced by Service Control Policies (SCPs). - Utilization of a central Transit Gateway (TGW) for all outbound internet traffic. - Use of VPC Endpoints for secure access to AWS services like Systems Manager (SSM). 

## 3. Simulation Methodology 
To achieve this, a two-part Infrastructure-as-Code (IaC) solution using Terraform was developed to separate platform and application concerns. 

### Part 1: Network Environment Simulation ("The Platform") 
This foundational script provisions a network architecture that mirrors the client's setup. 

* **Workload VPC**: A VPC was created containing only private subnets across two Availability Zones (ca-central-1a, ca-central-1b), with no attached Internet Gateway. This simulates the client's provided application VPC.
* **Transit/Egress VPC**: A separate "Hub" VPC was created to model NRCan's central networking services. This VPC contains the only Internet Gateway and NAT Gateway in the entire environment, providing a single, managed point of egress.
* **Transit Gateway**: A Transit Gateway was deployed to connect the Workload VPC (the "Spoke") to the Transit VPC (the "Hub").
* **Routing**:
* * The route table for the Workload VPC's private subnets was configured to direct all internet-bound traffic (0.0.0.0/0) to the Transit Gateway. - Crucially, return routes were added to the Transit VPC to direct traffic destined for the Workload VPC back through the Transit Gateway, ensuring a complete and functional network path.
### Part 2: Application Workload Deployment ("The Application") This script is designed to be deployed into the pre-existing network environment created by Part 1. It consumes network identifiers (VPC ID, Subnet IDs) as input variables. 
* **Internal Application Load Balancer (ALB)**: An ALB was deployed and configured as internal. It resides in the private subnets and does not have a public IP, adhering to the IGW restriction. - **EC2 Web Server**: An Ubuntu EC2 instance running an Apache web server was deployed into a private subnet. Its security group is configured to only accept traffic from the internal ALB. - **VPC Endpoints**: To enable secure administrative access without public exposure, VPC Endpoints for the AWS Systems Manager service were deployed within the Workload VPC, as per the client's recommended pattern. - **Public Access Simulation**: To validate a complete end-to-end user path, a public-facing Network Load Balancer (NLB) was provisioned within the Transit VPC. This NLB simulates the client's central ingress point, accepting public traffic and forwarding it securely across the Transit Gateway to the application's internal ALB. ## 4. Detailed Architectural Alignment The following table confirms the alignment of the simulated environment with the client's documentation. | **Feature** | **Client's Environment (NRCan Reality)** | **Simulated Environment (Terraform)** | **Alignment & Analysis** | |-------------|------------------------------------------|--------------------------------------|--------------------------| | **VPC** | Pre-existing VPC: vpc-0809... | workload_vpc created by the network-environment script. | Perfect. The simulation correctly models the pre-existing VPC into which the application must be deployed. | | **Subnets** | "2 private subnets across AZs" | workload_private_subnet_a & _b created across two different AZs. | Perfect. The high-availability, private-only subnet design is accurately replicated. | | **Outbound Internet** | "Instance → Private Subnet → TGW → Internet" | EC2 → private subnet → TGW → Transit VPC → NAT GW → IGW → Internet | Excellent & More Realistic. The client's description is a functional simplification. Our simulation explicitly builds the necessary egress VPC that must exist for their design to work, proving the model is functionally identical and architecturally complete. | | **Inbound Internet** | Not explicitly described | Public NLB (in Transit VPC) → Internal ALB (in Workload VPC) → Private EC2 | Excellent & Proactive. This solution fills the gap in the client's documentation with a standard, secure enterprise pattern that is fully compatible with their restrictions. | | **AWS Service Access** | "Instance → VPC Endpoint → AWS Services" | The EC2 instance uses VPC Endpoints to connect to AWS Systems Manager for secure access. | Perfect. The client's recommended pattern for service access has been implemented and validated. | | **Key Restrictions** | No Internet Gateways or NAT Gateways in the application VPC. | The simulated workload_vpc has no IGW and no NAT Gateway. | Perfect. The most critical security constraint has been fully respected. | | **Overall Pattern** | "Centralized networking" | "Hub-and-Spoke" with a central egress VPC. | Perfect. The correct industry-standard name for their architectural pattern has been implemented. | ## 5. Conclusion and Next Steps
